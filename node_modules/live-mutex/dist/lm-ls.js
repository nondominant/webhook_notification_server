#!/usr/bin/env node
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("./client");
const client_utils_1 = require("./client-utils");
const chalk_1 = require("chalk");
const index = process.argv.indexOf('--json');
let v = null;
if (index > 1) {
    try {
        v = JSON.parse(process.argv[index + 1]);
    }
    catch (err) {
        client_utils_1.log.error(`Could not parse your --json argument, try --json '{"port": 3091,"key": "foo"}' ... ` +
            chalk_1.default.magenta(`run your JSON through a validator if need be.`));
        throw chalk_1.default.magentaBright(err.message);
    }
}
else {
    v = {};
}
process.once('warning', function (e) {
    client_utils_1.log.error('process warning:', e && e.message || e);
});
process.once('error', function (e) {
    client_utils_1.log.error('process error:', e && e.message || e);
    process.exit(1);
});
process.once('unhandledRejection', function (e) {
    client_utils_1.log.error('unhandledRejection:', e && e.message || e);
    process.exit(1);
});
process.once('uncaughtException', function (e) {
    client_utils_1.log.error('uncaughtException:', e && e.message || e);
    process.exit(1);
});
const getSelectable = function (selectable, original) {
    return Object.keys(selectable).reduce((a, b) => (a[b] = original[b], a), {});
};
const clientOpts = getSelectable(client_1.validConstructorOptions, v);
new client_1.Client(clientOpts).ensure().then(function (c) {
    c.ls(function (err, results) {
        if (err)
            throw err;
        console.log(chalk_1.default.blueBright('Number of locks:'), chalk_1.default.bold(results.ls_result.length));
        console.log(chalk_1.default.blueBright('Lock keys list:'), results.ls_result);
        process.exit(0);
    });
});
