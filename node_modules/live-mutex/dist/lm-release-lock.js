#!/usr/bin/env node
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("./client");
const client_utils_1 = require("./client-utils");
const chalk_1 = require("chalk");
const index = process.argv.indexOf('--json');
let v = null;
if (index > 0) {
    try {
        v = JSON.parse(process.argv[index + 1]);
    }
    catch (err) {
        client_utils_1.log.error(`Could not parse your --json argument, try --json '{"port": 3091,"key": "foo"}' ... ` +
            `\nrun your JSON through a validator if need be.`);
        throw err.message;
    }
}
else {
    v = {};
    v.key = process.argv[2] || process.env.live_mutex_key || '';
    v.port = parseInt(process.argv[3] || process.env.live_mutex_port || '6970');
}
if (!Number.isInteger(v.port)) {
    client_utils_1.log.error('Live-mutex: port could not be parsed to integer from command line input.');
    client_utils_1.log.error('Usage: lm_acquire_lock <key> <?port>');
    process.exit(1);
}
if (!v.key) {
    client_utils_1.log.error('Live-mutex: no key passed at command line.');
    client_utils_1.log.error('Usage: lm_acquire_lock <key> <?port>');
    process.exit(1);
}
process.once('warning', function (e) {
    client_utils_1.log.error('process warning:', e && e.message || e);
});
process.once('unhandledRejection', function (err) {
    client_utils_1.log.error('unhandledRejection:', err);
    process.exit(1);
});
process.once('uncaughtException', function (err) {
    client_utils_1.log.error('uncaughtException:', err);
    process.exit(1);
});
const getSelectable = function (selectable, original) {
    return Object.keys(selectable).reduce((a, b) => (a[b] = original[b], a), {});
};
const clientOpts = Object.assign(v, { keepLocksAfterDeath: true });
const c = new client_1.Client(clientOpts);
c.emitter.on('info', function () {
    client_utils_1.log.debug(...arguments);
});
c.emitter.on('warning', function () {
    client_utils_1.log.warn(...arguments);
});
c.emitter.on('error', function () {
    client_utils_1.log.error(...arguments);
});
c.ensure().then(function (c) {
    const unlockOptions = Object.assign({ ttl: 6000 }, v, { keepLocksAfterDeath: true, force: true });
    c.unlock(v.key, unlockOptions, function (e) {
        if (e) {
            client_utils_1.log.error(chalk_1.default.magenta.bold(e && e.message || e));
            client_utils_1.log.error(`To discover what is going on with the broker, use ${chalk_1.default.bold.blueBright('$ lm_inspect_broker -p <port> -h <host>')}.`);
            return process.exit(1);
        }
        client_utils_1.log.debug(chalk_1.default.green.bold(`${chalk_1.default.italic('Unlocked/released')} lock for key:`), `'${chalk_1.default.blueBright.bold(v.key)}'`);
        process.exit(0);
    });
});
