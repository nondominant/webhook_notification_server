'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const broker_1 = require("./broker");
const fs = require("fs");
const chalk_1 = require("chalk");
const path = require("path");
const shared_internal_1 = require("./shared-internal");
const cp = require('child_process');
let host = process.env.live_mutex_host || '0.0.0.0';
let port = parseInt(process.env.live_mutex_port || '6970');
const index = process.argv.indexOf('--json');
const useUDS = process.env.use_uds === 'yes' || process.argv.indexOf('--use-uds') > 1;
let v = { port, host };
if (index > 1) {
    try {
        v = JSON.parse(process.argv[index + 1]);
    }
    catch (err) {
        broker_1.log.error(chalk_1.default.magenta(`Could not parse your --json argument, try --json '{"port":3091}'.`));
        throw chalk_1.default.magentaBright(err.message);
    }
    host = v.host = (v.host || host);
    port = v.port = (v.port || port);
}
if (useUDS || v.udsPath) {
    v.udsPath = path.resolve(process.env.HOME + '/.lmx/uds.sock');
    try {
        fs.mkdirSync(path.resolve(process.env.HOME + '/.lmx'), { recursive: true });
    }
    catch (err) {
        broker_1.log.error('Could not create .lmx dir in user home.');
        broker_1.log.error(err);
        process.exit(1);
    }
    try {
        fs.unlinkSync(v.udsPath);
    }
    catch (err) {
    }
}
if (!Number.isInteger(port)) {
    broker_1.log.error(chalk_1.default.magenta('Live-mutex: port could not be parsed to integer from command line input.'));
    broker_1.log.error('Usage: lmx-start-server <key> <?port>');
    process.exit(1);
}
process.once('warning', function (e) {
    if (process.env.lmx_log_errors != 'nope') {
        broker_1.log.error('process warning:', chalk_1.default.magenta(shared_internal_1.inspectError(e)));
    }
});
process.once('unhandledRejection', function (e) {
    if (process.env.lmx_log_errors != 'nope') {
        broker_1.log.error('unhandled-rejection:', chalk_1.default.magenta(shared_internal_1.inspectError(e)));
    }
});
process.once('uncaughtException', function (e) {
    if (process.env.lmx_log_errors != 'nope') {
        broker_1.log.error('uncaught-exception:', chalk_1.default.magenta(shared_internal_1.inspectError(e)));
    }
});
const b = new broker_1.Broker(v);
process.once('exit', function () {
    b.close(null);
});
b.emitter.on('warning', function () {
    broker_1.log.warn(...arguments);
});
b.emitter.on('error', function () {
    broker_1.log.error(...arguments);
});
b.ensure().then(b => {
    broker_1.log.info(chalk_1.default.bold('LMX broker version:'), chalk_1.default.blueBright(b.getVersion()));
    broker_1.log.info(chalk_1.default.bold('LMX broker listening on:'), chalk_1.default.cyan.bold(String(b.getListeningInterface())));
})
    .catch(function (err) {
    broker_1.log.error('broker launch error:', shared_internal_1.inspectError(err));
    process.exit(1);
});
